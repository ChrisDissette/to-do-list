{"version":3,"sources":["components/ToDo.jsx","components/Form.jsx","App.jsx","index.js"],"names":["useStyles","makeStyles","ToDo","props","toDo","handleToDoDelete","handleToggleComplete","i","toDoClasses","complete","push","theme","createTheme","palette","primary","main","secondary","error","text","ThemeProvider","List","ListItem","secondaryAction","IconButton","edge","sx","color","onClick","event","ListItemButton","role","undefined","dense","ListItemIcon","Checkbox","checked","disableRipple","onChange","ListItemText","className","join","field","margin","display","height","button","errorMessage","fontColor","Form","handleNewToDoSubmit","setNewToDo","newToDo","toDoError","setToDoError","classes","errorText","helperMessage","length","noValidate","autoComplete","onSubmit","TextField","variant","required","id","helperText","label","value","fullWidth","target","Typography","textAlign","style","Button","type","marginTop","App","useState","toDos","setToDos","delIdx","filteredToDos","filter","idx","updatedToDos","map","Box","alignItems","justifyContent","flexDirection","minHeight","bgcolor","width","xs","sm","md","px","gutterBottom","preventDefault","toDoItem","box","maxWidth","mt","borderRadius","backgroundColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2691d1b.chunk.js","sourcesContent":["import List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { createTheme } from '@mui/material/styles';\r\nimport { green, purple, blue } from '@mui/material/colors';\r\nimport { ThemeProvider } from '@mui/material/styles';\r\n\r\nconst useStyles = makeStyles({\r\n\r\n})\r\n\r\nconst ToDo = (props) => {\r\n\r\n    const {toDo, handleToDoDelete, handleToggleComplete, i} = props\r\n    \r\n    const toDoClasses = []\r\n\r\n    if (toDo.complete) {\r\n        toDoClasses.push('line-through')\r\n    }\r\n\r\n    const theme = createTheme({\r\n        palette: {\r\n            primary: {\r\n                main: '#902bf5',\r\n            },\r\n            secondary: {\r\n                main: '#fc7b54',\r\n            },\r\n            error: {\r\n                main: '#6c6c6c'\r\n            },\r\n            text: {\r\n                secondary: \"#fefefe\"\r\n            } \r\n            \r\n        },\r\n    })\r\n\r\n\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div>\r\n            <ThemeProvider theme={theme}>\r\n                <List>\r\n                    <ListItem\r\n                        secondaryAction={\r\n                            <IconButton edge='end' sx={{color: 'text.secondary'}} >\r\n                                <DeleteIcon onClick={(event) => {\r\n                                    handleToDoDelete(i)\r\n                                }}/>\r\n                            </IconButton>\r\n                        }\r\n                    >\r\n                        <ListItemButton role={undefined} dense>\r\n                            <ListItemIcon>\r\n                                <Checkbox \r\n                                    edge='start'\r\n                                    checked={toDo.complete}\r\n                                    disableRipple\r\n                                    onChange={(event) => {\r\n                                        handleToggleComplete(i)\r\n                                    }}\r\n                                />\r\n                            </ListItemIcon>\r\n                            <ListItemText sx={{color: 'text.secondary'}} primary={toDo.text} className={toDoClasses.join(' ')} />\r\n                        </ListItemButton>\r\n                    </ListItem>\r\n                </List>\r\n            </ThemeProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDo\r\n","import TextField from '@mui/material/TextField'\r\nimport Button from '@mui/material/Button';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { createTheme } from '@mui/material/styles';\r\nimport { ThemeProvider } from '@mui/material/styles';\r\nimport Typography from '@mui/material/Typography';\r\nimport {useState} from 'react'\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        margin: 20,\r\n        display: 'block',\r\n        height: 60\r\n    },\r\n    button: {\r\n        height:40,\r\n    },\r\n    errorMessage: {\r\n        fontColor: 'white'\r\n    },\r\n})\r\n\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#902bf5',\r\n        },\r\n        secondary: {\r\n            main: '#fc7b54',\r\n        },\r\n        error: {\r\n            main: '#6c6c6c'\r\n        },\r\n        text: {\r\n            primary: \"#fefefe\",\r\n            secondary: \"#fefefe\"\r\n        } \r\n    },\r\n})\r\n\r\n\r\n\r\nconst Form = (props) => {\r\n    \r\n    \r\n    const {handleNewToDoSubmit, setNewToDo, newToDo, setToDoError, toDoError} = props\r\n    const classes = useStyles()\r\n    \r\n    const errorText = []\r\n    let helperMessage = \"\"\r\n    \r\n    if (newToDo.length>80) {\r\n        errorText.push('error-message')\r\n        helperMessage=\"Try entering fewer characters\"\r\n    }\r\n    return (\r\n        <ThemeProvider theme={theme} >\r\n            <div>\r\n                    <form noValidate autoComplete=\"off\" onSubmit={(event) =>{\r\n                        handleNewToDoSubmit(event)\r\n                    }}> \r\n                        <TextField\r\n                            variant='standard'\r\n                            className={classes.field}\r\n                            // color='text.primary'\r\n                            // sx={{color: 'text.secondary'}}\r\n                            color='primary'\r\n                            required\r\n                            error={toDoError}\r\n                            id=\"outlined-required\"\r\n                            helperText={helperMessage}\r\n                            label=\"What do you have to do today?\"\r\n                            value={newToDo}\r\n                            fullWidth\r\n                            onChange={(event) => {\r\n                                setNewToDo(event.target.value)\r\n                            }}\r\n                        />\r\n                        <Typography variant=\"caption\" display=\"block\" textAlign='right'>\r\n                        <span style={{color:'#fefefe'}}> <span className={errorText}>{newToDo.length}</span>/80</span>\r\n                        </Typography>\r\n                        <Button className={classes.button} fullWidth type='input' variant='contained' sx={{marginTop:5}} >Add</Button>\r\n                    </form>\r\n            </div>\r\n        </ThemeProvider>\r\n        \r\n    )\r\n}\r\n\r\nexport default Form\r\n","import {useState} from 'react'\nimport './App.css'\nimport ToDo from './components/ToDo'\nimport Form from './components/Form'\nimport Box from '@mui/material/Box';\nimport { createTheme } from '@mui/material/styles';\nimport { green, purple } from '@mui/material/colors';\nimport { ThemeProvider } from '@mui/material/styles';\nimport { makeStyles } from '@mui/styles';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\n\nconst theme = createTheme({\n  palette: {\n      primary: {\n          main: '#902bf5',\n      },\n      secondary: {\n          main: '#fc7b54',\n      },\n      error: {\n        main: '#31bacd'\n      },\n      text: {\n        secondary: \"#fefefe\"\n    } \n  },\n})\n\nconst useStyles = makeStyles({\n  button: {\n    height:40,\n}\n})\n\nfunction App() {\n\n  const [newToDo, setNewToDo] = useState(\"\")\n  const [toDos, setToDos] = useState([])\n  const [toDoError, setToDoError] = useState(false)\n\n  const classes = useStyles()\n\n  const handleNewToDoSubmit = (event) => {\n    event.preventDefault()\n\n    if (newToDo.length===0 || newToDo.length>80){\n      setToDoError(true)\n      return\n    }\n\n    const toDoItem = {\n      text: newToDo,\n      complete: false\n    }\n\n    setToDos([\n      ...toDos,\n      toDoItem\n    ])\n    setToDoError(false)\n    setNewToDo(\"\")\n  }\n\n  const handleToDoDelete = (delIdx) => {\n    const filteredToDos = toDos.filter((toDo, i) => {\n      return  i !== delIdx\n    })\n\n    setToDos(filteredToDos)\n  }\n\n  const handleToggleComplete = (idx) => {\n    const updatedToDos = toDos.map((toDo, i) => {\n      if(idx === i) {\n        toDo.complete = !toDo.complete\n      }\n      return toDo\n    })\n\n    setToDos(updatedToDos)\n  }\n\n  const onDeleteHandler = event => {\n    let newArr = []\n    setToDos(newArr)\n  }\n\n  return (\n        <ThemeProvider theme={theme}>\n          <Box display='flex' alignItems='center' justifyContent='center' flexDirection='column' minHeight='100vh' bgcolor='secondary.main'>\n            <Typography variant=\"h1\" textAlign='center' width={{ xs: 300, sm: 500, md:600}} px={5} color='text.secondary' gutterBottom >\n              To-Do List\n              {/* To-Do List <CheckBoxIcon sx={{fontSize:\"50px\"}} /> */}\n            </Typography>\n              <Box width={{ xs: 350, sm:500, md:600}}>\n                <Form handleNewToDoSubmit={handleNewToDoSubmit} setNewToDo={setNewToDo} newToDo={newToDo} toDoError={toDoError} setToDoError={setToDoError} />\n                <Box className={classes.box} maxWidth={600} minHeight={{xs:100, sm:150, md:200}} bgcolor={'primary.light'} mt={2} borderRadius={3}>\n                  {\n                    toDos.map((toDo, i) => {\n                      return (\n                        <ToDo \n                          handleToDoDelete={handleToDoDelete} \n                          handleToggleComplete={handleToggleComplete} \n                          toDo={toDo} \n                          i={i} \n                        />\n                      )\n                    })\n                  }\n                </Box>\n              <Button onClick={onDeleteHandler} className={classes.button} variant='contained' fullWidth sx={{backgroundColor: 'error.main', marginTop: 2}}>Clear</Button>\n            </Box>\n          </Box>\n        </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}